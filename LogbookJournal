🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺
Day "1" Decemeber 7, 2022
Today began will a disscussion with Mr. Nguyen about programming plagarizing. We learned not to use MORE THAN 10 lines of code from an outside source. Any code pulled from another source must be CITED appropriately (end of main.py file)!

Later, we brainstormed new card games to program outside of Blackjack, War, or Uno. We discussed the possibility of Go Fish, spoons and Crazy Eights. By the end of the school day, we had decided Crazy Eights!

We began the afternoon by beganing our program for Crazy Eights! We started by a watching a brief video on the rules: https://youtu.be/1c4YPQTS35I. After, we started by listing what we will specifically need to program to create a working Crazy Eights game. One of the first programming issues we came across was trying to figure our how to compare the numbers and suits of a card indiviually. This minor problem was later ressolved when the solution of assinging the specific index value to a variable and then using an additional set of square bracets to compare indiviual characters of the string was proposed (simple fix!).

By the end of today, we had programmed the begining of our Crazy Eights game that: dealt cards, displayed both players' collection, allowed the players to draw or place cards, remove and add same elements from one list to another, and create a initial game loop.

Tormroww, we hope to begin scoring and points system for the game by also incorporating Crazy Eights unique factor: the [8] card.
🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺🟥🔴🔺

🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵
Day "2" Decemeber 8, 2022

Homework started tonight with some card game programming. Today, we knew we would have to write up rules, check rank and suits with a card that a rank of 10, and incorporate the wild 8 card in crazy eights.

Checking rank for 10 started by creating a new initial conditional that checked the first character of the string data type for a particular character, which was 1. This was repeated for for the second index value in the string for a rank of 10. To check for the suits, we simply used index value 3.

Rules were explained and additional *link* was added.

The display was made better so that one player was one color and the other player was another.

We played and checked if our game winner conditional worked and saw that it did. 

Few to none programming problems/issues were encountered today, not regarding basic concatination errors, minor syntax, or indentation.

At this point, the majority of our verizon of crazy eights is complete!
🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵🟦🔷🔵

🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐
Day "3" December 9, 2022

With majority of the game already programmed, today we mainly added finishing touches. Wild 8 card was finalized and we also improved our method of checking for a card with a rank of [10]. 

Additionally, an extra segment of code was added to check if the initial discard deck card was a card with a rank of 8. Using conditionals, we programmed this aspect of the game into our program. 

As this was going to be one of the last days before we submitt our program, display and visual aspects to make the game more appealing were added. Basic uses of coloramma module was used. Time.sleep() function was used to created delays between segments of coded printed onto the screen and the char_delay feature was used to print out a string data type in a slow manner.

Minor problem: we ran into a error that said discardCard variable was a local variable so inside our function we declared the variable a global variable using notes and reference from w3 schools (https://www.w3schools.com/python/python_scope.asp)

We finished today we checking items off the rubric: 
✅ Breakdown of rules + additional link  
✅ Use of random.shuffle() AND random.choices() 
✅ Numerous conditionals programmed w/ boolean, variables, lists, etc.
✅ Inclusion of BOTH for() & while() loops
✅ 5➕ created functions with parameters; called multiple times
✅ Overall simulation very acurate
✅ Invalid user inputs have been accounted for 
✅ Outputs and displays have programmed to be visually appealing 👍
✅ No wasted line; code efficently enforced. Comments have been used appropriately
✅ Logbook updated daily including events such as team brainstorming, programming progress, programming issues, programming solutions, gained programming knowledge + more!
🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐🟨🟡⭐

Thanks.
-- Krish and Samuel!


